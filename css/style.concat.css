@charset "UTF-8";

@font-face {
  font-family: "linea-basic-10";
  src:url("fonts/linea-basic-10.eot");
  src:url("fonts/linea-basic-10.eot?#iefix") format("embedded-opentype"),
    url("fonts/linea-basic-10.woff") format("woff"),
    url("fonts/linea-basic-10.ttf") format("truetype"),
    url("fonts/linea-basic-10.svg#linea-basic-10") format("svg");
  font-weight: normal;
  font-style: normal;

}

[data-icon]:before {
  font-family: "linea-basic-10" !important;
  content: attr(data-icon);
  font-style: normal !important;
  font-weight: normal !important;
  font-variant: normal !important;
  text-transform: none !important;
  speak: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

[class^="icon-"]:before,
[class*=" icon-"]:before {
  font-family: "linea-basic-10" !important;
  font-style: normal !important;
  font-weight: normal !important;
  font-variant: normal !important;
  text-transform: none !important;
  speak: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-basic-accelerator:before {
  content: "a";
}
.icon-basic-alarm:before {
  content: "b";
}
.icon-basic-anchor:before {
  content: "c";
}
.icon-basic-anticlockwise:before {
  content: "d";
}
.icon-basic-archive:before {
  content: "e";
}
.icon-basic-archive-full:before {
  content: "f";
}
.icon-basic-ban:before {
  content: "g";
}
.icon-basic-battery-charge:before {
  content: "h";
}
.icon-basic-battery-empty:before {
  content: "i";
}
.icon-basic-battery-full:before {
  content: "j";
}
.icon-basic-battery-half:before {
  content: "k";
}
.icon-basic-bolt:before {
  content: "l";
}
.icon-basic-book:before {
  content: "m";
}
.icon-basic-book-pen:before {
  content: "n";
}
.icon-basic-book-pencil:before {
  content: "o";
}
.icon-basic-bookmark:before {
  content: "p";
}
.icon-basic-calculator:before {
  content: "q";
}
.icon-basic-calendar:before {
  content: "r";
}
.icon-basic-cards-diamonds:before {
  content: "s";
}
.icon-basic-cards-hearts:before {
  content: "t";
}
.icon-basic-case:before {
  content: "u";
}
.icon-basic-chronometer:before {
  content: "v";
}
.icon-basic-clessidre:before {
  content: "w";
}
.icon-basic-clock:before {
  content: "x";
}
.icon-basic-clockwise:before {
  content: "y";
}
.icon-basic-cloud:before {
  content: "z";
}
.icon-basic-clubs:before {
  content: "A";
}
.icon-basic-compass:before {
  content: "B";
}
.icon-basic-cup:before {
  content: "C";
}
.icon-basic-diamonds:before {
  content: "D";
}
.icon-basic-display:before {
  content: "E";
}
.icon-basic-download:before {
  content: "F";
}
.icon-basic-exclamation:before {
  content: "G";
}
.icon-basic-eye:before {
  content: "H";
}
.icon-basic-eye-closed:before {
  content: "I";
}
.icon-basic-female:before {
  content: "J";
}
.icon-basic-flag1:before {
  content: "K";
}
.icon-basic-flag2:before {
  content: "L";
}
.icon-basic-floppydisk:before {
  content: "M";
}
.icon-basic-folder:before {
  content: "N";
}
.icon-basic-folder-multiple:before {
  content: "O";
}
.icon-basic-gear:before {
  content: "P";
}
.icon-basic-geolocalize-01:before {
  content: "Q";
}
.icon-basic-geolocalize-05:before {
  content: "R";
}
.icon-basic-globe:before {
  content: "S";
}
.icon-basic-gunsight:before {
  content: "T";
}
.icon-basic-hammer:before {
  content: "U";
}
.icon-basic-headset:before {
  content: "V";
}
.icon-basic-heart:before {
  content: "W";
}
.icon-basic-heart-broken:before {
  content: "X";
}
.icon-basic-helm:before {
  content: "Y";
}
.icon-basic-home:before {
  content: "Z";
}
.icon-basic-info:before {
  content: "0";
}
.icon-basic-ipod:before {
  content: "1";
}
.icon-basic-joypad:before {
  content: "2";
}
.icon-basic-key:before {
  content: "3";
}
.icon-basic-keyboard:before {
  content: "4";
}
.icon-basic-laptop:before {
  content: "5";
}
.icon-basic-life-buoy:before {
  content: "6";
}
.icon-basic-lightbulb:before {
  content: "7";
}
.icon-basic-link:before {
  content: "8";
}
.icon-basic-lock:before {
  content: "9";
}
.icon-basic-lock-open:before {
  content: "!";
}
.icon-basic-magic-mouse:before {
  content: "\"";
}
.icon-basic-magnifier:before {
  content: "#";
}
.icon-basic-magnifier-minus:before {
  content: "$";
}
.icon-basic-magnifier-plus:before {
  content: "%";
}
.icon-basic-mail:before {
  content: "&";
}
.icon-basic-mail-multiple:before {
  content: "'";
}
.icon-basic-mail-open:before {
  content: "(";
}
.icon-basic-mail-open-text:before {
  content: ")";
}
.icon-basic-male:before {
  content: "*";
}
.icon-basic-map:before {
  content: "+";
}
.icon-basic-message:before {
  content: ",";
}
.icon-basic-message-multiple:before {
  content: "-";
}
.icon-basic-message-txt:before {
  content: ".";
}
.icon-basic-mixer2:before {
  content: "/";
}
.icon-basic-mouse:before {
  content: ":";
}
.icon-basic-notebook:before {
  content: ";";
}
.icon-basic-notebook-pen:before {
  content: "<";
}
.icon-basic-notebook-pencil:before {
  content: "=";
}
.icon-basic-paperplane:before {
  content: ">";
}
.icon-basic-pencil-ruler:before {
  content: "?";
}
.icon-basic-pencil-ruler-pen:before {
  content: "@";
}
.icon-basic-photo:before {
  content: "[";
}
.icon-basic-picture:before {
  content: "]";
}
.icon-basic-picture-multiple:before {
  content: "^";
}
.icon-basic-pin1:before {
  content: "_";
}
.icon-basic-pin2:before {
  content: "`";
}
.icon-basic-postcard:before {
  content: "{";
}
.icon-basic-postcard-multiple:before {
  content: "|";
}
.icon-basic-printer:before {
  content: "}";
}
.icon-basic-question:before {
  content: "~";
}
.icon-basic-rss:before {
  content: "\\";
}
.icon-basic-server:before {
  content: "\e000";
}
.icon-basic-server2:before {
  content: "\e001";
}
.icon-basic-server-cloud:before {
  content: "\e002";
}
.icon-basic-server-download:before {
  content: "\e003";
}
.icon-basic-server-upload:before {
  content: "\e004";
}
.icon-basic-settings:before {
  content: "\e005";
}
.icon-basic-share:before {
  content: "\e006";
}
.icon-basic-sheet:before {
  content: "\e007";
}
.icon-basic-sheet-multiple:before {
  content: "\e008";
}
.icon-basic-sheet-pen:before {
  content: "\e009";
}
.icon-basic-sheet-pencil:before {
  content: "\e00a";
}
.icon-basic-sheet-txt:before {
  content: "\e00b";
}
.icon-basic-signs:before {
  content: "\e00c";
}
.icon-basic-smartphone:before {
  content: "\e00d";
}
.icon-basic-spades:before {
  content: "\e00e";
}
.icon-basic-spread:before {
  content: "\e00f";
}
.icon-basic-spread-bookmark:before {
  content: "\e010";
}
.icon-basic-spread-text:before {
  content: "\e011";
}
.icon-basic-spread-text-bookmark:before {
  content: "\e012";
}
.icon-basic-star:before {
  content: "\e013";
}
.icon-basic-tablet:before {
  content: "\e014";
}
.icon-basic-target:before {
  content: "\e015";
}
.icon-basic-todo:before {
  content: "\e016";
}
.icon-basic-todo-pen:before {
  content: "\e017";
}
.icon-basic-todo-pencil:before {
  content: "\e018";
}
.icon-basic-todo-txt:before {
  content: "\e019";
}
.icon-basic-todolist-pen:before {
  content: "\e01a";
}
.icon-basic-todolist-pencil:before {
  content: "\e01b";
}
.icon-basic-trashcan:before {
  content: "\e01c";
}
.icon-basic-trashcan-full:before {
  content: "\e01d";
}
.icon-basic-trashcan-refresh:before {
  content: "\e01e";
}
.icon-basic-trashcan-remove:before {
  content: "\e01f";
}
.icon-basic-upload:before {
  content: "\e020";
}
.icon-basic-usb:before {
  content: "\e021";
}
.icon-basic-video:before {
  content: "\e022";
}
.icon-basic-watch:before {
  content: "\e023";
}
.icon-basic-webpage:before {
  content: "\e024";
}
.icon-basic-webpage-img-txt:before {
  content: "\e025";
}
.icon-basic-webpage-multiple:before {
  content: "\e026";
}
.icon-basic-webpage-txt:before {
  content: "\e027";
}
.icon-basic-world:before {
  content: "\e028";
}

@charset "UTF-8";
/*NOTA: O CSS foi organizado de acordo com a nomenclatura BEM, que significa:
Block Element Modifier

- Block: Algo que faz sentido por si só se transportássemos para outro local, como um botão
- Element: Um segmento de um block, como o container do logo, por exemplo
- Modifier: Um modificador do Block ou do elemento, como um botão amarelo, por exemplo

Sintaxe: 
block__element--modifier

Sempre com double underline ou double dash
*/
/*

 *TAMANHO*        *DESCRICAO*       *ARGUMENTO*
0 - 600px:      celular             phone
600 - 900px:    tablet portrait     tab-port
900 - 1200px:   tablet landscape    tab-land
1200 - 1800px:  normal styles       --
1800px+:        monitor gigante     big-scr

 
- Ordem de revisão otimizada:
Base + typography > general layout + grid > page layout > components

*/
/*Normalize: Reset para todos os browsers exibirem igual*/
/*Pseudo-elementos precisam de declaração específica, eles não entram no símbolo "*" */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /*Faz com q as propriedades do box-sizing sejam herdadas. Por padrão box-sizing não tem
	herança de valores. Agora todas as propriedades que não tiverem declarações específicas
	vão herdar do box-sizing em body. Esse método deixa um pouco mais fácil lidar com alguns
	plugins também.*/
  box-sizing: inherit; }

/* root font size para referência do REM */
html {
  /* Queremos que o root font size seja de 10px. Mas colocar diretamente 10px impede que o usuário
	(as vezes com necessidades especiais) altere o tamanho do root font size da página. Acaba
	dendo uma má prática. Por isso colocamos em porcentagem. 
	- O padrão é 16px. Nós queremos 10px.
		100% = 16px, 62.5% = 10px. 
	*/
  font-size: 62.5%; }
  @media only screen and (max-width: 75em) {
    html {
      font-size: 56.25%; } }
  @media only screen and (max-width: 56.25em) {
    html {
      font-size: 50%; } }
  @media only screen and (min-width: 112.5em) {
    html {
      font-size: 75%; } }

/*Setando configurações básicas no body para outros elementos herdarem de um só local.*/
body {
  /* O borders e paddings não são adicionados ao total width e height. */
  box-sizing: border-box;
  padding: 3rem; }
  @media only screen and (max-width: 56.25em) {
    body {
      padding: 0; } }

/* customizando o modo de selecionar texto */
::selection {
  background-color: #55c57a;
  color: #fff; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  70% {
    opacity: .6;
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  70% {
    opacity: .6;
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

body {
  font-family: "Lato", sans-serif;
  /* Espessura da fonte. O quão "negritada" ela fica*/
  font-weight: 400;
  /* line-height é o espaçamento entre uma linha e outra.
	1.7 significa que terá 1.7 vezes o tamanho da fonte. */
  line-height: 1.7;
  color: #777; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
  /* Aparentemente há um tremor no final da animação em alguns casos e essa propriedade
    teoricamente o conserta. Ela serve, na verdade, para tirar a visibilidade das costas de
    um elemento, não daria para usá-la se quiséssemos girar o elemento 180 graus, por exemplo. */
  backface-visibility: hidden; }
  .heading-primary--main {
    font-size: 6rem;
    font-weight: 400;
    /* Block serviu para separar cada span numa linha, pois cada block ocupa 100% 
        da width. */
    display: block;
    /* Uma animação precisa desses duas propriedades pra funcionar: */
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* Essa propriedade muda o flow da animação (acho que é a curva de animação. */
    animation-timing-function: ease-out;
    /* Espaço entre as letras. */
    letter-spacing: 3.5rem; }
    @media only screen and (max-width: 37em) {
      .heading-primary--main {
        letter-spacing: 1rem;
        font-size: 5rem; } }
  .heading-primary--second {
    font-size: 2rem;
    font-weight: 700;
    /* Block serviu para separar cada span numa linha, pois um block ocupa 100% 
        da width. */
    display: block;
    /*ajustado manualmente pelo f12 do chrome até se alinhar com a palavra 
        grande em cima*/
    letter-spacing: 1.75rem;
    /*Atalho para setar todas as 3 propriedades de animação na mesma linha:*/
    animation: moveInRight 1s ease-out; }
    @media only screen and (max-width: 37em) {
      .heading-primary--second {
        font-size: 1.5rem;
        letter-spacing: .5rem; } }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: .2rem;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  transition: all .2s; }
  @media only screen and (max-width: 56.25em) {
    .heading-secondary {
      font-size: 3rem; } }
  @media only screen and (max-width: 37em) {
    .heading-secondary {
      font-size: 2.5rem; } }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

/* TEXT ALIGN */
.u-center-text {
  text-align: center !important; }

/* TEXT TRANSFORM */
.u-text-reset-transform {
  text-transform: none !important; }

/* MARGIN BOTTOM*/
.u-margin-bottom-small {
  margin-bottom: 2rem !important; }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }
  @media only screen and (max-width: 56.25em) {
    .u-margin-bottom-medium {
      margin-bottom: 3rem !important; } }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }
  @media only screen and (max-width: 56.25em) {
    .u-margin-bottom-big {
      margin-bottom: 5rem !important; } }

/* MARGIN TOP */
.u-margin-top-small {
  margin-top: 2rem !important; }

.u-margin-top-medium {
  margin-top: 4rem !important; }

.u-margin-top-big {
  margin-top: 6rem !important; }

.u-margin-top-huge {
  margin-top: 8rem !important; }

.btn {
  /*o botão sobe e cria sombra com essas propriedades*/
  /* Active é quando algo está pressinado com o click. */
  /* O botão desce e a sombra diminui com essas propriedades. */
  /* Pseudo-elemento para o efeito de botão crescendo e desaparecendo. Cria-se
    uma cópia do botão. */ }
  .btn, .btn:link, .btn:visited {
    /* para anchors */
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    font-size: 1.6rem;
    /* precisamos dessa posição relativa para o pseudo elemento (mais pra baixo
        no código) poder ter posição absoluta */
    position: relative;
    /* transition está aqui pq deve ficar no local inicial uma animação, isso é, 
        antes de ela sofrer qualquer alteração. Ela seta o tempo das outras com o all,
        creio eu. */
    transition: all .4s;
    /* botões que não são anchors ("a" tag) precisam dessas props. */
    border: none;
    cursor: pointer; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /*os valores para sombra são, respectivamente: X Y BLUR COR(RGBA)*/
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      /*scale(2) significa q o elemento terá 2 vezes o tamanho total dele*/
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:focus, .btn:active {
    /* para anchors */
    outline: none;
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn::after {
    /* Content é obrigatório em pseudo elementos, mesmo que ele esteja em branco.*/
    content: "";
    /* Display, aparentemente, é obrigatório tb. inline-block pq o botão original 
        é inline-block. */
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* A posição absoluta procura uma posição relativa na herança. temos que setar
        o botão original com posição relativa pra isso funcionar. */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    /* O quarto parâmetro aqui indica depois de quanto tempo a animação deve começar. */
    animation: moveInBottom .5s ease-out .5s;
    /* Essa linha faz com que o setup do 0% no keyframe seja aplicado antes da 
        animação começar. */
    animation-fill-mode: backwards; }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn-text:link, .btn-text:visited {
    font-size: 1.6rem;
    color: #55c57a;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid #55c57a;
    padding: 3px;
    transition: all .2s; }
  .btn-text:hover {
    background-color: #55c57a;
    color: #fff;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.25);
    transform: translateY(-3px); }
  .btn-text:active {
    transform: translate(0); }

.composition {
  /* Position relative aqui para o position absolute do __photo ter referência */
  position: relative; }
  .composition__photo {
    /*O width abaixo é em relação ao col-1-of-2. Ou seja o parent.*/
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 1;
    transition: all .2s;
    /* Faz com que o outline definido em hover se afaste da imagem */
    outline-offset: 2rem; }
    @media only screen and (max-width: 56.25em) {
      .composition__photo {
        float: left;
        position: relative;
        width: 33.3%;
        box-shadow: 0 1.5rem 3rem rgba(0, 0, 0, 0.2); } }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
      @media only screen and (max-width: 56.25em) {
        .composition__photo--p1 {
          top: 0;
          transform: scale(1.2); } }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
      @media only screen and (max-width: 56.25em) {
        .composition__photo--p2 {
          top: -1rem;
          transform: scale(1.3);
          z-index: 2; } }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
      @media only screen and (max-width: 56.25em) {
        .composition__photo--p3 {
          top: 1rem;
          left: 0;
          transform: scale(1.1); } }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 2; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: all .3s; }
  @media only screen and (max-width: 56.25em) {
    .feature-box {
      margin: 0 10%; } }
  @media only screen and (max-width: 37em) {
    .feature-box {
      margin: 0 20%; } }
  .feature-box__icon {
    font-size: 6rem;
    /* Colorindo a fonte com grandiente */
    display: inline;
    /* display inline ajuda em alguma coisa no gradiente */
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    /* --- */ }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.card {
  /* Não tá ainda mto claro como perspective funciona, mas ele adiciona perspectiva
    ao virar o card. Sem ele o card vira 180 graus flat, sem perspectiva nenhuma.
    Aparentemente qto menor o número de pixels mais espalhafatoso a rotação é. Com uma
    porrada de pixel ela fica bem smooth. */
  perspective: 150rem;
  position: relative;
  height: 50rem;
  /* FRONT SIDE STYLING FROM HELL */
  /* BACK SIDE STYLING FROM HELL */
  /* A segunda condição dessa media query significa que ela será aplicada quando o browser
    detectar que não há a possibilidade do usuário dar hover, como num ipad, por exemplo. */ }
  .card__side {
    height: 50rem;
    transition: all .8s ease;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    /* Absolute position também faz com que o elemento seja apenas do tamanho necessário,
        reduzindo-se, neste caso, ao texto em seu interior. Consertei com o width 100%.
        Outro efeito não intencional gerado foi o colapso do Height e, por algum motivo, a
        propriedade perspective deixa de funcionar. Tive que definir um height pra card.*/
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    /* O border radius pode se perder caso exista uma imagem que ultrapasse
        as suas pontas arredondadas. Pra evitar isso, setamos o overflow como hidden. 
        Ou seja, se algo transbordar é escondido. */
    border-radius: 6px;
    overflow: hidden; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back--1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back--2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back--3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    /* Precisamos setar o height aqui para a imagem não se adequar ao conteúdo do div,
        que pode ser muito pequeno. Lembrando que é um background, não uma tag img, entao
        o div não se ajusta a ele e sim ela ao div. */
    height: 23rem;
    background-size: cover;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    /* O clip-path, por alguma razão, nos obriga a setar manualmente os border radius */
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
    /* Essa propriedade parece muito com os blends do photoshop. */
    background-blend-mode: screen; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    /* Essa propriedade aplica a decoracao inteira para cada linha como se fosse um elemento diferente.
        normalmente não teríamos padding antes da quebra de linha, por exemplo, com isso nós temos. */
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      /* Utilizei widht de 80% pro underline não riscar a carta de ponta a ponta. */
      /* Margin para centralizar esses 80%. */
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    text-align: center;
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }
  @media only screen and (max-width: 56.25em), only screen and (hover: none) {
    .card {
      height: auto;
      border-radius: 3px;
      background-color: #fff;
      box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
      .card__side {
        height: auto;
        position: relative;
        box-shadow: none; }
        .card__side--back {
          transform: rotateY(0);
          clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%); }
      .card:hover .card__side--front {
        transform: rotateY(0); }
      .card__cta {
        position: relative;
        top: 0;
        left: 0;
        transform: translate(0);
        width: 100%;
        padding: 7rem 4rem 4rem 4rem; }
      .card__price-box {
        margin-bottom: 3rem; }
      .card__price-value {
        font-size: 4rem; }
      .card__details {
        padding: 1rem 3rem; } }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  padding: 6rem;
  font-size: 1.6rem;
  transform: skewX(-12deg);
  /* ver propriedade "&__shape { trasmform } abaixo. */
  padding-left: 9rem;
  /* Apesar de parecer que o transform abaixo funcionaria em todas as propriedades filhas,
    ele não funciona na imagem. Isso porque a imagem já tem um transform próprio que toma
    precedência por especificidade, então temos que dar skew lá embaixo no shape também. */ }
  @media only screen and (max-width: 56.25em) {
    .story {
      width: 100%;
      padding: 4rem;
      padding-left: 7rem; } }
  @media only screen and (max-width: 37em) {
    .story {
      transform: skewX(0); } }
  .story > * {
    transform: skewX(12deg); }
    @media only screen and (max-width: 37em) {
      .story > * {
        transform: skewX(0); } }
  .story__shape {
    border-radius: 50%;
    overflow: hidden;
    /* Visando afastar do texto a imagem circular, o melhor jeito não é usar margens, mas, 
        sim, usar transform. Entretanto, fazendo isso nós transbordamos o limite esquerdo do 
        container dando uma impressão a esquerda tem menos margem q a direita, então temos de 
        corrigir o ".story" com um padding-left pra aumentá-lo. */
    transform: translateX(-3rem) skewX(12deg);
    /* Tem de colocar por causa do absolute lá no caption. */
    position: relative;
    /* Requerimentos para o shape-outside funcionar: */
    float: left;
    width: 13rem;
    height: 13rem;
    /* gracefully degradation */ }
    @supports (-webkit-shape-clip-path: circle(50% at 50% 50%)) or (clip-path: circle(50% at 50% 50%)) {
      .story__shape {
        width: 15rem;
        height: 15rem;
        /* shape-outside determina como os outros elementos se comportam perto dele.
            Nesse caso, o texto se adapta em volta de um circulo. Caso não tivesse essa propriedade,
            o texto ficaria quadrado ao lado deste círculo. 
            
            sintaxe shape-outside: circle(RAIO at Position_X Posistion_Y) 
            
            Ele ainda tem requerimentos: ele só funciona se o elemento tiver float, width e height. */
        -webkit-shape-outside: circle(50% at 50% 50%);
        shape-outside: circle(50% at 50% 50%);
        /* O clip-path corta a imagem para parecer um círculo. */
        -webkit-shape-clip-path: circle(50% at 50% 50%);
        clip-path: circle(50% at 50% 50%);
        border-radius: none; } }
    @media only screen and (max-width: 37em) {
      .story__shape {
        transform: translateX(-3rem) skewX(0); } }
  .story__image {
    height: 15rem;
    /* Ajustando a imagem pra moça ma foto ficar centralizada. */
    transform: translateX(-4rem) scale(1.4);
    transition: all .5s; }
  .story__caption {
    text-align: center;
    color: #fff;
    text-transform: uppercase;
    font-size: 1.7rem;
    /* Para o texto flutuar centralizado na imagem. */
    position: absolute;
    top: 50%;
    left: 50%;
    /* Ajustando o pivot. Pra centralizar seria "50%, 50%", mas queremos que o texto comece
        embaixo e vá subindo na animação do hover, então 20% deixa ele lá embaixo. */
    transform: translate(-50%, 20%);
    /* Por algum motivo, bem no final da animação do texto subindo, de maneira quase 
        imperceptível, o dá um glitchzinho no final movendo 1px pro lado. Essa propriedade corrige
        isso, não faço ideia do porque. */
    backface-visibility: hidden;
    opacity: 0;
    transition: all .5s; }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__image {
    /* Zoom out */
    transform: translateX(-4rem) scale(1);
    filter: blur(3px) brightness(80%); }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: .15;
  /* Corta a parte do vídeo que transborda o elemento */
  overflow: hidden; }
  .bg-video__content {
    /* Faz o video caber no container pai */
    height: 100%;
    width: 100%;
    /* Propriedade parecida com o bg-size: cover, faz o video caber aí dentro. */
    object-fit: cover; }

.form {
  /* Enquanto o placeholder for mostrado, estilize o &__label que vem imediatamente depois. */ }
  .form__group:not(:last-child) {
    margin-bottom: 2rem; }
  .form__input {
    /* Formulários, por padrão, não herdam o settings da fonte. Então
        setamos manualmente aqui. */
    font-family: inherit;
    color: inherit;
    font-size: 1.5rem;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba(255, 255, 255, 0.5);
    border: none;
    width: 90%;
    /* block faz com que o campo de input tenha sua própria linha, o figcaption vai pra
        linha debaixo */
    display: block;
    /* Quando clicamos no input aparece uma borda verde (ver input:hover abaixo). Para que
        os elementos abaixo do clicado não se movam devido à borda verde criada, setamos uma 
        transparente antes. */
    border-bottom: 3px solid transparent;
    /* Seletor para quando o campo for focado e for inválido pela validação html */
    /* Propriedade para estilizar o input placeholder */ }
    .form__input:focus {
      /* Retira a borda azulada do focus */
      outline: none;
      /* Por acessibilidade, para pessoas que usam não usam o mouse, apenas o teclado, precisamos
            dar algum tipo de referência de que esse campo está focado (uma vez q retiramos o focus)
            então setamos: */
      box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.1);
      /* Borda verde que aparece ao clicar */
      border-bottom: 3px solid #55c57a; }
    .form__input:focus:invalid {
      border-bottom: 3px solid #ff7730; }
    .form__input::-webkit-input-placeholder {
      color: #999; }
  .form__label {
    font-size: 1.2rem;
    font-weight: 500;
    margin-left: 2rem;
    margin-top: .7rem;
    display: block;
    transform: translateY(-8.5rem);
    transition: all .3s; }
  .form__input:placeholder-shown + .form__label {
    font-size: 1.6rem;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem); }
  .form__radio-group {
    width: 49%;
    display: inline-block; }
    @media only screen and (max-width: 56.25em) {
      .form__radio-group {
        width: 100%;
        margin-bottom: 2rem; } }
  .form__radio-label {
    font-size: 1.6rem;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem; }
  .form__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid #55c57a;
    border-radius: 50%;
    display: inline-block;
    position: absolute;
    left: 0;
    top: -.4;
    /* bolinha do meio da radio */ }
    .form__radio-button::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      background-color: #55c57a;
      opacity: 0;
      transition: opacity .2s; }
  .form__radio-input {
    display: none; }
  .form__radio-input:checked + .form__radio-label .form__radio-button::after {
    opacity: 1; }

.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.8);
  z-index: 4;
  opacity: 0;
  visibility: hidden;
  transition: .3s;
  /* Técnica graceful degradation: aplica um bloco de código caso o browser suporte uma 
    propriedade. */
  /* Popup aberto */ }
  @supports (-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
    .popup {
      -webkit-backdrop-filter: blur(10px);
      backdrop-filter: blur(10px);
      background-color: rgba(0, 0, 0, 0.3); } }
  .popup__content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 75%;
    background-color: #fff;
    box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.2);
    border-radius: 3px;
    overflow: hidden;
    /* Temos um transform aqui dentro do mixin lá em cima. Precisamos de um segundo. O 
        problema é que eles se sobrescreveriam, mesmo que diferentes. Portanto, para evitar
        que ele desapareça, precisamos reescrever o transform do mixin aqui também. */
    transform: translate(-50%, -50%) scale(0);
    transition: all .4s; }
  .popup__right {
    width: 66.7%;
    padding: 3rem 5rem;
    /* "display tablecell" simula uma tabela, consequentemente dando a mesma altura para ambas
        as células dentro dela. Uma vez que elas tenham a mesma altura, posso centralizar o texto
        verticalmente na célula. */
    display: table-cell;
    vertical-align: middle; }
  .popup__left {
    width: 33.3%;
    display: table-cell; }
  .popup__img {
    /* Aqui o "display block" faz com que não haja espaço abaixo de cada imagem e elas 
        fiquem uma colada na outra. */
    display: block;
    width: 100%; }
  .popup__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -moz-column-rule: 1px solid #eee;
    column-count: 2;
    column-gap: 4rem;
    column-rule: 1px solid #eee;
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto; }
  .popup__close:link, .popup__close:visited {
    color: #777;
    position: absolute;
    top: 2.5rem;
    right: 2.5rem;
    font-size: 3rem;
    text-decoration: none;
    display: inline-block;
    transition: all .2s;
    /* Isso diminui a altura da linha do texto. Normalmente ela é mais alta do que larga e
            neste caso, estava atrapalhando o posicionamento do botão "X" */
    line-height: 0; }
  .popup__close:hover {
    color: #55c57a; }
  .popup:target {
    opacity: 1;
    visibility: visible; }
  .popup:target .popup__content {
    transform: translate(-50%, -50%) scale(1); }

.header {
  position: relative;
  /*vh é Viewport Height, uma unidade de medida que diz, em porcentagem,
	este elemento deve ter (no caso abaixo) 95% da altura do viewport.*/
  height: 85vh;
  /*O gradiente é sempre aplicado no BG-image, antes da URL da img*/
  background-image: linear-gradient(to right, rgba(126, 213, 111, 0.6), rgba(40, 180, 133, 0.8)), url(../img/hero-small.jpg);
  /* Cover faz com que o width do background tente sempre se adaptar
	ao tamanho da tela*/
  background-size: cover;
  /* BG position seta o pivot de redimensionamento da imagem qdo ela precisa
	aumentar ou diminuir. Top fica preso, ou bot, ou center e tudo se redimensiona
	ao redor*/
  background-position: top;
  /* Graceful degradation */
  /* A img hero-small tem 1200px. Quero mostrá-la para widths de até 1200px.
    Aqui eu tenho duas condições:
    1) Se a tela for 2x, então eu mostro a hero-small até de 600px. Pq high-res tem 2px físicos para cada 1px virtual. Depois disso eu mostro a hero versão grande.
    2) Caso tenha mais de 1200px, exibe a imagem grande. */ }
  @supports (-webkit-clip-path: polygon(0 0)) or (clip-path: polygon(0 0)) {
    .header {
      height: 95vh;
      /* Aqui definimos os quatro pontos do polígono para setar a máscara do elemento
        define-se X e Y respectivamente, 4 vezes represetando os 4 pontos. X é horizontal, 
        Y é vertical*/
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); } }
  @media only screen and (max-width: 75em) {
    .header {
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 80vh, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 80vh, 0 100%); } }
  @media only screen and (max-width: 56.25em) {
    .header {
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); } }
  @media only screen and (min-width: 37em) and (min-resolution: 192dpi), only screen and (min-width: 37em) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-width: 75em) {
    .header {
      background-image: linear-gradient(to right, rgba(126, 213, 111, 0.6), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg); } }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /*especificando a altura da imagem o browser já se encarrega de dar resize 
        no resto.*/
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /*O pivot point de top e left fica, por padrão, no canto esquerdo superior do
        div, então ESTE PONTO está centralizado, o div começa a se desenhar do meio da
        tela. Transform, logo abaixo, corrige isso.*/
    top: 40%;
    left: 50%;
    /*transform corrige o pivot point do div (ou o move por inteiro, não tenho ctz)*/
    transform: translate(-50%, -50%);
    /*centraliza o texto dentro deste container*/
    text-align: center; }

.row {
  /* A diferença entre width e max-width é que o primeiro terá sempre 114rem, não importando
    a resolução da página, enquanto o segundo terá 114rem se a resolução permitir. Caso 
    contrário ajustará o width ao máximo permitido pela resolução vigente. */
  max-width: 114rem;
  /* Centraliza o elemento na página. sintaxe: "margin: TopBot RightLeft;" */
  margin: 0 auto;
  /* Seletor CSS de atributos como class, src, alt, etc. O "^" (circunflexo) depois do
    "class" abaixo significa q tudo que COMECE com "col-" deverá ser selecionado. */ }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  @media only screen and (max-width: 56.25em) {
    .row {
      max-width: 50rem; } }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
    @media only screen and (max-width: 56.25em) {
      .row:not(:last-child) {
        margin-bottom: 6rem; } }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
      @media only screen and (max-width: 56.25em) {
        .row [class^="col-"]:not(:last-child) {
          margin-right: 0;
          margin-bottom: 6rem; } }
    @media only screen and (max-width: 56.25em) {
      .row [class^="col-"] {
        width: 100% !important; } }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.footer {
  background-color: #333;
  padding: 18rem 0;
  font-size: 1.4rem;
  color: #f7f7f7; }
  @media only screen and (max-width: 56.25em) {
    .footer {
      padding: 8rem 0; } }
  .footer__logo-box {
    /* text align aparentemente não funciona apenas pra textos. Aqui a prop está alinhando uma imagem. */
    text-align: center;
    margin-bottom: 8rem; }
    @media only screen and (max-width: 56.25em) {
      .footer__logo-box {
        margin-bottom: 6rem; } }
  .footer__logo {
    width: 15rem;
    height: auto; }
  .footer__navigation {
    border-top: 1px solid #777;
    padding-top: 2rem;
    display: inline-block; }
    @media only screen and (max-width: 56.25em) {
      .footer__navigation {
        width: 100%;
        text-align: center; } }
  .footer__list {
    list-style: none;
    text-decoration: none; }
  .footer__item {
    display: inline-block; }
    .footer__item:not(:last-child) {
      margin-right: 1.5rem; }
  .footer__link:link, .footer__link:visited {
    text-decoration: none;
    text-transform: uppercase;
    display: inline-block;
    transition: all .2s;
    background-color: #333;
    color: #f7f7f7; }
  .footer__link:hover, .footer__link:active {
    color: #55c57a;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.4);
    transform: rotate(5deg) scale(1.3); }
  .footer__copyright {
    border-top: 1px solid #777;
    padding-top: 2rem;
    margin-right: 2rem;
    width: 80%;
    float: right; }
    @media only screen and (max-width: 56.25em) {
      .footer__copyright {
        width: 100%;
        float: none;
        text-align: center; } }

.navigation__checkbox {
  display: none; }

.navigation__button {
  background-color: #fff;
  height: 7rem;
  width: 7rem;
  /* position: fixed serve para fixar a posição de um elemento mesmo enquanto a página é rolada. */
  position: fixed;
  top: 6rem;
  right: 6rem;
  z-index: 4;
  border-radius: 50%;
  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer; }
  @media only screen and (max-width: 56.25em) {
    .navigation__button {
      top: 4rem;
      right: 4rem; } }
  @media only screen and (max-width: 37em) {
    .navigation__button {
      top: 3rem;
      right: 3rem; } }

.navigation__background {
  height: 6rem;
  width: 6rem;
  border-radius: 50%;
  position: fixed;
  top: 6.5rem;
  right: 6.5rem;
  background-image: radial-gradient(#7ed56f, #28b485);
  z-index: 2;
  transition: transform .8s; }
  @media only screen and (max-width: 56.25em) {
    .navigation__background {
      top: 4.5rem;
      right: 4.5rem; } }
  @media only screen and (max-width: 37em) {
    .navigation__background {
      top: 3.5rem;
      right: 3.5rem; } }

.navigation__checkbox:checked ~ .navigation__background {
  transform: scale(80); }

.navigation__nav {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  right: 0;
  z-index: 3;
  visibility: hidden;
  opacity: 0;
  transition: all .8s; }

.navigation__checkbox:checked ~ .navigation__nav {
  visibility: visible;
  opacity: 1; }

.navigation__list {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  list-style: none;
  text-align: center; }

.navigation__item {
  margin: 1rem; }

.navigation__link:link, .navigation__link:visited {
  /* se nao colocar inline block aqui o padding n funciona direito e a animação do 
            translate tb. */
  display: inline-block;
  font-size: 3rem;
  font-weight: 300;
  padding: 1rem 2rem;
  color: #fff;
  text-transform: uppercase;
  text-decoration: none;
  /* background branco animado do menu */
  background-image: linear-gradient(120deg, transparent 0%, transparent 50%, #fff 50%);
  background-size: 225%;
  transition: all .4s; }

.navigation__link:hover, .navigation__link:active {
  color: #7ed56f;
  background-position: 100%;
  transform: translateX(1rem); }

.navigation__icon {
  position: relative;
  margin-top: 3.5rem; }
  .navigation__icon, .navigation__icon::after, .navigation__icon::before {
    width: 3rem;
    height: 2px;
    background-color: #333;
    display: inline-block; }
  .navigation__icon::after, .navigation__icon::before {
    content: "";
    position: absolute;
    /* sem esse left as listras dos pseudo elem ficam meio bagunçadas. */
    left: 0;
    transition: all .2s; }
  .navigation__icon::before {
    top: -.8rem; }
  .navigation__icon::after {
    top: .8rem; }

.navigation__button:hover .navigation__icon::before {
  top: -1rem; }

.navigation__button:hover .navigation__icon::after {
  top: 1rem; }

.navigation__checkbox:checked + .navigation__button .navigation__icon {
  background-color: transparent; }

.navigation__checkbox:checked + .navigation__button .navigation__icon::before {
  top: 0;
  transform: rotate(135deg); }

.navigation__checkbox:checked + .navigation__button .navigation__icon::after {
  top: 0;
  transform: rotate(-135deg); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
  @media only screen and (max-width: 75em) {
    .section-about {
      padding: 30rem 0 25rem 0; } }

.section-features {
  padding: 20rem 0;
  /*O gradiente é sempre aplicado no BG-image, antes da URL da img*/
  background-image: linear-gradient(to right, rgba(126, 213, 111, 0.6), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  /* A imagem do background fica responsiva */
  background-size: cover;
  /* Isso entorta todo o elemento pra estilizár o background */
  transform: skewY(-7deg);
  /* Retirando o gap entre os backgrounds */
  margin-top: -12rem;
  /* Isso desentorta o primeiro filho direto do elemento para que não pareça torto, ou seja,
    a row contento todas os quadros. */ }
  .section-features > * {
    transform: skewY(7deg); }
  @media only screen and (max-width: 56.25em) {
    .section-features {
      padding: 10rem 0; } }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  /* Retirando o gap entre os backgrounds */
  margin-top: -12rem; }
  @media only screen and (max-width: 56.25em) {
    .section-tours {
      padding: 20rem 0 10rem 0; } }

.section-stories {
  padding: 15rem 0;
  /* Por causa do .bg-video que precisa de absolute */
  position: relative; }
  @media only screen and (max-width: 56.25em) {
    .section-stories {
      padding: 10rem 0; } }

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
  @media only screen and (max-width: 56.25em) {
    .section-book {
      padding: 10rem 0; } }

.book {
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
  /* Essa propriedade é, basicamente: bg-image: linear-gradiente, url(path).
    Ou seja, um gradiente e uma imagem.
    A mudança de cor do gradiente está definida em pontos específicos, como 0% e 50%.
    A cor muda bruscamente do meio em diante porque aqui define-se que é branco do 0 ao 50%,
    depois é transpartente do 50% em diante. */
  background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 50%, transparent 50%), url(../img/nat-10.jpg);
  /* Essa propriedade setada em 100% faz quase o mesmo que "cover".
    Aqui ele cobre a imagem seguindo o eixo X, cover cobre seguindo o eixo Y. */
  background-size: 100%; }
  @media only screen and (max-width: 75em) {
    .book {
      background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 65%, transparent 65%), url(../img/nat-10.jpg);
      background-size: cover; } }
  @media only screen and (max-width: 56.25em) {
    .book {
      background-image: linear-gradient(to right, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 100%), url(../img/nat-10.jpg); } }
  .book__form {
    width: 50%;
    padding: 6rem; }
    @media only screen and (max-width: 75em) {
      .book__form {
        width: 65%; } }
    @media only screen and (max-width: 56.25em) {
      .book__form {
        width: 100%; } }
